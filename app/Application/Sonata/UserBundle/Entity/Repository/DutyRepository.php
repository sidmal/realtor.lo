<?php

namespace Application\Sonata\UserBundle\Entity\Repository;

use Application\Sonata\UserBundle\Entity\Duty;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\DBAL\Types\Type;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\NoResultException;
use Doctrine\ORM\Query\Parameter;

/**
 * DutyRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class DutyRepository extends EntityRepository
{
    protected static $monthRus = [
        1 => 'январь',
        2 => 'февраль',
        3 => 'март',
        4 => 'апрель',
        5 => 'май',
        6 => 'июнь',
        7 => 'июль',
        8 => 'август',
        9 => 'сентябрь',
        10 => 'октябрь',
        11 => 'ноябрь',
        12 => 'декабрь'
    ];

    public function getDuty($type, $manager = null)
    {
        if($type == 0){
            $queryDateStart = (new \DateTime())->modify('first day of -1 month');
            $queryDateEnd = (new \DateTime())->modify('last day of -1 month');
        }
        elseif($type == 1){
            $queryDateStart = (new \DateTime())->modify('first day of 0 month');
            $queryDateEnd = (new \DateTime())->modify('last day of 0 month');
        }
        else{
            $queryDateStart = (new \DateTime())->modify('first day of +1 month');
            $queryDateEnd = (new \DateTime())->modify('last day of +1 month');
        }

        $builder = $this->getEntityManager()->createQueryBuilder()
            ->select('duty')
            ->from('ApplicationSonataUserBundle:Duty', 'duty')
            ->where('duty.dutyEndAt > :duty_end_at')
            ->setParameter('duty_end_at', $queryDateStart, Type::DATETIME)
            ->andWhere('duty.dutyEndAt <= :last_month_day')
            ->setParameter('last_month_day', $queryDateEnd->setTime(23, 59, 59), Type::DATETIME)
            ->orderBy('duty.dutyStartAt', 'asc')
        ;

        if($manager){
            $builder->andWhere('duty.manager = :manager')->setParameter('manager', $manager);
        }

        try{
            $result = self::getPrintableDuty($builder->getQuery()->getResult());
        }
        catch(NoResultException $e){
            $result = null;
        }

        return $result;
    }

    static protected function getPrintableDuty($duty)
    {
        $dutyResult = [];

        foreach($duty as $item){
            $dutyStartDate = $item->getDutyStartAt();
            $dutyEndDate = $item->getDutyEndAt();

            for($index = $dutyStartDate->format('H'); $index < $dutyEndDate->format('H'); $index++){
                $dutyResult[$item->getBranchId()->getName()]
                [$item->getManager()->getFio()]
                [$dutyStartDate->format('d').' '.self::$monthRus[$dutyStartDate->format('n')]]
                [$index] = $item->getUserId()->getFio();
            }
        }

        return $dutyResult;
    }

    public function checkDuty($branch, $dateStart, $dateEnd)
    {
        $builder = $this->getEntityManager()->createQueryBuilder()
            ->from('ApplicationSonataUserBundle:Duty', 'duty')
            ->where('duty.branchId = :branch')
        ;

        $builder->andWhere(
            $builder->expr()->andX(
                $builder->expr()->lte('duty.dutyEndAt', ':duty_end'),
                $builder->expr()->gte('duty.dutyStartAt', ':duty_start')
            )
        );

        $builder->select($builder->expr()->count('duty.id'));

        $builder->setParameters(
            new ArrayCollection(
                [
                    new Parameter('branch', $branch),
                    new Parameter('duty_end', $dateEnd, Type::DATETIME),
                    new Parameter('duty_start', $dateStart, Type::DATETIME)
                ]
            )
        );

        try{
            $result = $builder->getQuery()->getSingleScalarResult();
        }
        catch(NoResultException $e){
            return false;
        }

        return ($result > 0) ? true : false;
    }

    public function getMonthRus($monthNumber)
    {
        return self::$monthRus[$monthNumber];
    }
}
