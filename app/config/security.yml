parameters:
    security.acl.permission.map.class: Sonata\AdminBundle\Security\Acl\Permission\AdminPermissionMap

jms_security_extra:
    secure_all_services: false
    expressions: true

security:
    encoders:
        FOS\UserBundle\Model\UserInterface:
            id: app.password.encoder

    role_hierarchy:
        ROLE_ADMIN: [ROLE_USER, ROLE_SONATA_ADMIN]
        ROLE_SUPER_ADMIN:
            - ROLE_USER
            - ROLE_APP_MANAGER
            - ROLE_APP_OPERATOR
            - ROLE_APP_AGENT
            - ROLE_APP_OFFICE_DIRECTOR
            - ROLE_APP_ADMINISTRATOR
            - ROLE_APP_OFFICE_OPERATOR
            - ROLE_APP_EMPLOYEE
            - ROLE_SONATA_ADMIN
            - ROLE_ADMIN
            - ROLE_ALLOWED_TO_SWITCH

    providers:
        #in_memory:
        #    memory:
        #        users:
        #            user:  { password: userpass, roles: [ 'ROLE_USER' ] }
        #            admin: { password: adminpass, roles: [ 'ROLE_ADMIN' ] }

        fos_userbundle:
            id: fos_user.user_manager

    firewalls:
        dev:
            pattern:  ^/(_(profiler|wdt)|css|images|js)/
            security: false

        login:
            pattern:  ^/demo/secured/login$
            security: false

        secured_area:
            pattern:    ^/demo/secured/
            form_login:
                check_path: _security_check
                login_path: _demo_login
            logout:
                path:   _demo_logout
                target: _demo
            #anonymous: ~
            #http_basic:
            #    realm: "Secured Demo Area"

        # -> custom firewall for the admin area of the URL
        admin:
            pattern: /admin(.*)
            form_login:
                provider: fos_userbundle
                login_path: /admin/login
                use_forward: false
                check_path: /admin/login_check
                failure_path: null
                default_target_path: /admin
            logout:
                path: /admin/logout
                target: /admin/login
            anonymous: true
        # -> end custom configuration

        # defaut login area for standard users
        main:
            pattern: .*
            form_login:
                provider: fos_userbundle
                login_path: /login
                use_forward: false
                check_path: /login_check
                failure_path: null
            logout: true
            anonymous: true

    access_control:
        # URL of FOSUserBundle which need to be available to anonymous users
        - { path: ^/_wdt, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/_profiler, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/login$, role: IS_AUTHENTICATED_ANONYMOUSLY }

        # -> custom access control for the admin area of the URL
        - { path: ^/admin/login$, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/admin/logout$, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/admin/login-check$, role: IS_AUTHENTICATED_ANONYMOUSLY }
        # -> end

        - { path: ^/register, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/resetting, role: IS_AUTHENTICATED_ANONYMOUSLY }

        # Secured part of the site
        # This config requires being logged for the whole site and having the admin role for the admin part.
        # Change these rules to adapt them to your needs
        - { path: ^/admin, role: [ROLE_ADMIN, ROLE_SONATA_ADMIN, ROLE_APP_ADMINISTRATOR, ROLE_APP_MANAGER, ROLE_APP_OPERATOR, ROLE_APP_AGENT, ROLE_APP_OFFICE_DIRECTOR, ROLE_APP_OFFICE_OPERATOR, ROLE_APP_EMPLOYEE] }
        - { path: ^/.*, role: IS_AUTHENTICATED_ANONYMOUSLY }
