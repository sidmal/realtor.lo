<?php

namespace Realtor\CallBundle\Entity\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\DBAL\Types\Type;
use Doctrine\ORM\AbstractQuery;
use Doctrine\ORM\NoResultException;
use Doctrine\ORM\Query\Expr\OrderBy;
use Doctrine\ORM\Query\Parameter;

/**
 * CallRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CallRepository extends EntityRepository
{
    public function getIncomeCall($forPhone, array $events)
    {
        $qb = $this->getEntityManager()->createQueryBuilder()
            ->select(
                [
                    'call.id',
                    'call.linkedId',
                    'call.fromPhone',
                    'call.toPhone',
                    'call.createdAt',
                    'call.callAction',
                    'call.atsCallId',
                ]
            )
            ->from('CallBundle:Call', 'call')
            ->where('call.type = 1')
            ->setMaxResults(1)
            ->orderBy('call.eventAt', 'desc');

        $qb->andWhere($qb->expr()->in('call.callAction', ':events'));
        $qb->andWhere($qb->expr()->between('call.createdAt', ':dateFrom', ':dateTo'));
        $qb->andWhere($qb->expr()->notLike('call.fromPhone', ':fromPhone'));
        $qb->andWhere($qb->expr()->in('call.toPhone', ':forPhone'));

        $qb->setParameters(
            new ArrayCollection(
                [
                    new Parameter('forPhone', $forPhone),
                    new Parameter('events', $events),
                    new Parameter('dateFrom', (new \DateTime())->sub(new \DateInterval('PT8S')), Type::DATETIME),
                    new Parameter('dateTo', (new \DateTime())->add(new \DateInterval('PT8S')), Type::DATETIME),
                    new Parameter('fromPhone', '*%*'),
                ]
            )
        );

        try{
            $result = $qb->getQuery()->getResult(AbstractQuery::HYDRATE_ARRAY);
        }
        catch(NoResultException $e){
            $result = null;
        }

        return $result;
    }

    public function getAuthByAccessCodeEvent($accessCode)
    {
        $builder = $this->getEntityManager()->createQueryBuilder()
            ->select('call')
            ->from('CallBundle:Call', 'call')
            ->where('call.callAction = :call_action')
            ->andWhere('call.access_code = :access_code');

        $builder->andWhere($builder->expr()->between('call.createdAt', ':current_day_start', ':current_day_end'));

        $builder->setParameters(
            new ArrayCollection(
                [
                    new Parameter('call_action', 'pincode'),
                    new Parameter('access_code', $accessCode),
                    new Parameter('current_day_start', (new \DateTime())->setTime(0, 0, 0), Type::DATETIME),
                    new Parameter('current_day_end', (new \DateTime())->setTime(23, 59, 59), Type::DATETIME),
                ]
            )
        );

        try{
            $result = $builder->getQuery()->getResult();
        }
        catch(NoResultException $e){
            $result = null;
        }

        return $result;
    }

    public function getLastCallByCaller($caller, array $events)
    {
        $qb = $this->getEntityManager()->createQueryBuilder()
            ->select('call')
            ->from('CallBundle:Call', 'call')
            ->leftJoin('call.params', 'call_params')
            ->where('call.type = 1')
            ->andWhere('call.fromPhone = :caller_phone')
            ->orderBy('call.eventAt', 'desc');

        $qb->andWhere($qb->expr()->in('call.callAction', ':events'));
        $qb->andWhere($qb->expr()->notIn('call_params.callerName', ':not_callers_name'));

        $qb->setParameters(
            new ArrayCollection(
                [
                    new Parameter('caller_phone', $caller),
                    new Parameter('events', $events),
                    new Parameter('not_callers_name', ['', '<undefined>', 'undefined'])
                ]
            )
        );

        try{
            $result = $qb->getQuery()->getResult();
        }
        catch(NoResultException $e){
            $result = null;
        }

        return $result;
    }

    public function getReport($fields, $conditions = [], $group_by = [])
    {
        if(empty($fields)){
            return null;
        }

        $builder = $this->getEntityManager()->createQueryBuilder()
            ->from('CallBundle:Call', 'call')
            ->leftJoin('call.params', 'call_params')
            ->leftJoin('call_params.advertisingSource', 'call_params_advertising_source')
            ->leftJoin('call_params.reason', 'call_params_reason')
            ->leftJoin('call.callResult', 'call_result')
            ->leftJoin('call_params.other_who_call', 'call_params_callers');

        if(!empty($conditions)){
            foreach($conditions as $condition){
                eval($condition);
            }
        }

        foreach($fields as $key => $field){
            if($field != 'call.eventAt'){
                $builder->andWhere($builder->expr()->isNotNull($field));
            }

            if(!in_array($field, $group_by)){
                if($field == 'call.eventAt'){
                    $group_by[] = 'event_at';
                }
                elseif($field == 'week'){
                    $group_by[] = 'week';
                }
                elseif($field == 'month'){
                    $group_by[] = 'month';
                }
                elseif($field == 'quarter'){
                    $group_by[] = 'quarter';
                }
                elseif($field == 'year'){
                    $group_by[] = 'year';
                }
                else{
                    $group_by[] = $field;
                }
            }

            if($field == 'call.eventAt'){
                $fields[$key] = 'DATE(call.eventAt) AS event_at';

                $builder->addOrderBy(new OrderBy('event_at', 'asc'));
            }
            elseif($field == 'week'){
                $fields[$key] = 'WEEK(call.eventAt) AS week';

                $builder->addOrderBy(new OrderBy('week', 'asc'));
            }
            elseif($field == 'month'){
                $fields[$key] = 'MONTH(call.eventAt) AS month';

                $builder->addOrderBy(new OrderBy('month', 'asc'));
            }
            elseif($field == 'quarter'){
                $fields[$key] = 'QUARTER(call.eventAt) AS quarter';

                $builder->addOrderBy(new OrderBy('quarter', 'asc'));
            }
            elseif($field == 'year'){
                $fields[$key] = 'YEAR(call.eventAt) AS year';

                $builder->addOrderBy(new OrderBy('year', 'asc'));
            }
            elseif($field == 'call_params_advertising_source.name'){
                $fields[$key] = 'call_params_advertising_source.name AS advertising_source_name';
            }
            elseif($field == 'call_params_reason.name'){
                $fields[$key] = 'call_params_reason.name AS reason_name';
            }
            elseif($field == 'call_result.name'){
                $fields[$key] = 'call_result.name AS call_result_name';
            }
            elseif($field == 'call_params_callers.name'){
                $fields[$key] = 'call_params_callers.name AS callers_name';
            }
        }

        if(!empty($group_by)){
            $fields[] = $builder->expr()->count('call.id').' AS cnt';
        }

        foreach($group_by as $group_by_item){
            if($group_by_item == 'call.eventAt'){
                $group_by_item = 'event_at';
            }

            if($group_by_item == 'week'){
                $fields[] = 'WEEK(call.eventAt) AS week';

                $builder->addOrderBy(new OrderBy('week', 'asc'));
            }
            elseif($group_by_item == 'month'){
                $fields[] = 'MONTH(call.eventAt) AS month';

                $builder->addOrderBy(new OrderBy('month', 'asc'));
            }
            elseif($group_by_item == 'quarter'){
                $fields[] = 'QUARTER(call.eventAt) AS quarter';

                $builder->addOrderBy(new OrderBy('quarter', 'asc'));
            }
            elseif($group_by_item == 'year'){
                $fields[] = 'YEAR(call.eventAt) AS year';

                $builder->addOrderBy(new OrderBy('year', 'asc'));
            }
            elseif($group_by_item == 'event_at'){
                $fields[] = 'DATE(call.eventAt) AS event_at';

                $builder->addOrderBy(new OrderBy('event_at', 'asc'));
            }

            $builder->addGroupBy($group_by_item);
        }

        $builder->select($fields);

        try{
            $query_result = $builder->getQuery()->getResult();

            if(empty($query_result)){
                $result = null;
            }
            else{
                if(empty($group_by)){
                    $result = $query_result;
                }
                else{
                    $result = [];
                    foreach($query_result as $item){

                        $result_item = [];
                        foreach($fields as $field){
                            if($field == 'DATE(call.eventAt) AS event_at'){
                                $field = 'event_at';
                            }
                            elseif($field == 'call_params_advertising_source.name AS advertising_source_name'){
                                $field = 'advertising_source_name';
                            }
                            elseif($field == 'call_params_reason.name AS reason_name'){
                                $field = 'reason_name';
                            }
                            elseif($field == 'call_result.name AS call_result_name'){
                                $field = 'call_result_name';
                            }
                            elseif($field == 'call_params_callers.name AS callers_name'){
                                $field = 'callers_name';
                            }
                            elseif($field == 'COUNT(call.id) AS cnt'){
                                $field = 'cnt';
                            }
                            elseif($field == 'WEEK(call.eventAt) AS week'){
                                $field = 'week';
                            }
                            elseif($field == 'MONTH(call.eventAt) AS month'){
                                $field = 'month';
                            }
                            elseif($field == 'QUARTER(call.eventAt) AS quarter'){
                                $field = 'quarter';
                            }
                            elseif($field == 'YEAR(call.eventAt) AS year'){
                                $field = 'year';
                            }
                            else{
                                $field = explode('.', $field)[1];
                            }

                            $result_item[$field] = $item[$field];
                        }

                        if($group_by[0] == 'call.eventAt'){
                            $group = 'event_at';
                        }
                        elseif($group_by[0] == 'call_params_advertising_source.name'){
                            $group = 'advertising_source_name';
                        }
                        elseif($group_by[0] == 'call_params_reason.name'){
                            $group = 'reason_name';
                        }
                        elseif($group_by[0] == 'call_result.name'){
                            $group = 'call_result_name';
                        }
                        elseif($group_by[0] == 'call_params_callers.name'){
                            $group = 'callers_name';
                        }
                        elseif($group_by[0] == 'week'){
                            $group = 'week';
                        }
                        elseif($group_by[0] == 'month'){
                            $group = 'month';
                        }
                        elseif($group_by[0] == 'quarter'){
                            $group = 'quarter';
                        }
                        elseif($group_by[0] == 'year'){
                            $group = 'year';
                        }

                        if(isset($group)) {
                            unset($result_item[$group]);
                        }

                        $result[$item[$group]][] = $result_item;
                    }
                }
            }
        }
        catch(NoResultException $e){
            $result = null;
        }

        return $result;
    }

    public function getUniqueLinkedId()
    {
        $qb = $this->getEntityManager()->createQueryBuilder()
            ->select(['ats_call_data.linkedid'])
            ->from('CallBundle:AtsCallData', 'ats_call_data')
            ->groupBy('ats_call_data.linkedid');

        $builder = $this->getEntityManager()->createQueryBuilder()
            ->select('call')
            ->from('CallBundle:Call', 'call')
            ->where('call.callAction = :call_action');

        $builder->andWhere($builder->expr()->notIn('call.linkedId', $qb->getDQL()));

        $builder->setParameters(
            new ArrayCollection(
                [
                    new Parameter('call_action', 'connect-exten')
                ]
            )
        );

        try{
            $result = $builder->getQuery()->getResult();
        }
        catch(NoResultException $e){
            $result = null;
        }

        return $result;
    }
}
